fitFS
stage1 <- lm(y12 ~ parentBMI + month4BMI + A1 + A1:race +
parentBMI:A1 + month4BMI:A1, data = bmiData)
stage1
stage1 <- lm(y12 ~ parentBMI + month4BMI + A1 + A1:race +
parentBMI:A1 + month4BMI:A1, data = bmiData)
stage1
stage2_counterfactuals$opt_tx
bmiData
bmiData$stage1_opt_response <- stage2_counterfactuals$opt_tx
bmiData
bmiData_A2_opt_response <- bmiData
bmiData_A2_opt_response$A2 <- stage2_counterfactuals$opt_tx
bmiData_A2_opt_response
opt_response_vals <- predict(stage2, new=bmiData_A2_opt_response)
opt_response_vals <- predict(stage2, new=bmiData_A2_opt_response)
opt_response_vals
stage1 <- lm(opt_response_vals ~ parentBMI + month4BMI + A1 + A1:race +
parentBMI:A1 + month4BMI:A1, data = bmiData)
stage1
fitFS <- qLearn(moMain = moMain, moCont = moCont,
data = bmiData, response = fitSS, txName = 'A1')
fitFS
stage1 <- lm(opt_response_vals ~ parentBMI + month4BMI + A1 + A1:race +
parentBMI:A1 + month4BMI:A1, data = bmiData)
stage1
fitFS <- qLearn(moMain = moMain, moCont = moCont,
data = bmiData, response = fitSS, txName = 'A1')
fitFS
bmiData
optTx(fitS)$optimalTx
fitFS <- qLearn(moMain = moMain, moCont = moCont,
data = bmiData, response = fitSS, txName = 'A1')
optTx(fitS)
fitFS
fitFS@analysis
fitFS@analysis@optimal
fitFS@analysis@optimal@optimalTx
fitFS@analysis
fitFS@analysis@optimal
fitFS@analysis@optimal@estimatedValue
fitFS@analysis@optimal@decisionFunc
fitFS@analysis@optimal
bmiData_A2_all_MR <- bmiData
bmiData_A2_all_MR$A1 <- rep("MR", nrow(bmiData))
bmiData_A2_all_CD <- bmiData
bmiData_A2_all_CD$A1 <- rep("CD", nrow(bmiData))
MR_score <- predict(stage1, new=bmiData_A2_all_MR)
CD_score <- predict(stage1, new=bmiData_A2_all_CD)
stage1_counterfactuals <- data.frame(cbind(MR_score, CD_score))
stage1_counterfactuals$opt_tx <- apply(stage1_counterfactuals[, c('MR_score', 'CD_score')], 1, optimal_tx)
stage1_counterfactuals
bmiData_A1_opt_response <- bmiData
bmiData_A1_opt_response$A1 <- stage1_counterfactuals$opt_tx
opt_response_vals <- predict(stage1, new=bmiData_A1_opt_response)
opt_response_vals
opt_response_vals
sum(stage2_counterfactuals$opt_tx == "MR")
sum(stage2_counterfactuals$opt_tx == "CD")
sum(stage1_counterfactuals$opt_tx == "MR")
sum(stage1_counterfactuals$opt_tx == "CD")
optTx(fitFS)$optimalTx
fitFS@analysis@optimal
bmiData_A1_opt_response$A1
library("devtools")
library(roxygen2)
getwd()
setwd("/Users/joakimblach/Projects/Penny/")
create("q_learning")
create("StatisticalQLearning")
library("DynTxRegime")
# Load and process data set
data(bmiData)
bmiData
head(bmiData)
y12 <- -100*(bmiData[,6L] - bmiData[,4L])/bmiData[,4L]
moMain <- buildModelObj(model = ~ parentBMI + month4BMI,
solver.method = 'lm')
moCont <- buildModelObj(model = ~ race + parentBMI + month4BMI,
solver.method = 'lm')
fitSS <- qLearn(moMain = moMain, moCont = moCont,
data = bmiData, response = y12, txName = 'A2')
fitFS <- qLearn(moMain = moMain, moCont = moCont,
data = bmiData, response = fitSS, txName = 'A1')
fitFS
is.character('hello')
colnames(bmiData_A2_all_MR)
lm(bmiData_A2_all_MR)
eval("x")
eval("x ~ y")
formula("x ~ y")
lm(formula("y12 ~ parentBMI"))
lm(formula("y12 ~ parentBMI"), data=bmiData_A2_all_MR)
reg_formula <- "y12" + " ~ "
paste("y12", "~ ", sep=" ")
reg_formula <- paste("y12", "~ ", sep=" ")
for (col in colnames(bmiData_A2_all_MR)) {
reg_formula <- paste(reg_formula, "+ ", sep=" ")
}
reg_formula
for (col in colnames(bmiData_A2_all_MR)) {
reg_formula <- paste(reg_formula, "+ ", col, sep=" ")
}
reg_formula
reg_formula <- paste("y12", "~ ", sep=" ")
for (col in colnames(bmiData_A2_all_MR)) {
reg_formula <- paste(reg_formula, "+ ", col, sep=" ")
}
reg_formula
reg_formula <- paste("y12", "~ ", sep=" ")
reg_formula
for (col in colnames(bmiData_A2_all_MR)) {
reg_formula <- paste(reg_formula, col, "+", sep=" ")
}
reg_formula
reg_formula <- paste("y12", "~", sep=" ")
for (col in colnames(bmiData_A2_all_MR)) {
reg_formula <- paste(reg_formula, col, "+", sep=" ")
}
reg_formula
colnames(bmiData_A2_all_MR)[-1]
colnames(bmiData_A2_all_MR)[:-1]
colnames(bmiData_A2_all_MR)[length(bmiData_A2_all_MR)]
bmiData_A2_all_MR
reg_formula <- paste("y12", "~", sep=" ")
for (col in colnames(bmiData_A2_all_MR)) {
if (col == colnames(bmiData_A2_all_MR)[length(bmiData_A2_all_MR)]) {
reg_formula <- paste(reg_formula, col, sep=" ")
} else {
reg_formula <- paste(reg_formula, col, "+", sep=" ")
}
}
reg_formula
setwd("/Users/joakimblach/Projects/Penny/StatisticalQLearning")
document()
install("StatisticalQLearning")
getwd()
setwd("..")
getwd()
install("StatisticalQLearning")
install("StatisticalQLearning")
install("StatisticalQLearning")
install("StatisticalQLearning")
install("StatisticalQLearning")
install("StatisticalQLearning")
install("StatisticalQLearning")
setwd("/Users/joakimblach/Projects/Penny/StatisticalQLearning")
document()
setwd("..")
getwd()
install("StatisticalQLearning")
install("StatisticalQLearning")
library("StatisticalQLearning")
?stage_regression
library("StatisticalQLearning")
head(bmiData_A2_all_MR)
stage_regression("month12BMI", bmiData_A2_all_MR)
stage_regression("month12BMI", as.data.frame(bmiData_A2_all_MR))
head(bmiData_A2_all_MR)
is.data.frame(bmiData_A2_all_MR)
lm("month12BMI ~ ender + race + parentBMI", data = outcome)
lm("month12BMI ~ gender + race + parentBMI", data = outcome)
install("StatisticalQLearning")
library("StatisticalQLearning")
stage_regression("month12BMI", bmiData_A2_all_MR)
lm("month12BMI ~ gender + race + parentBMI", data = bmiData_A2_all_MR)
head(bmiData_A2_all_MR)
bmiData_A2_all_MR[, 1:5]
head(bmiData_A2_all_MR[, 1:5])
head(bmiData_A2_all_MR[, 1:6])
stage_regression("month12BMI", bmiData_A2_all_MR[, 1:6])
lm("month12BMI ~ gender + race + parentBMI + month12BMI", data = bmiData_A2_all_MR)
colnames(bmiData_A2_all_MR)
colnames(bmiData_A2_all_MR) - "race"
colnames(bmiData_A2_all_MR) - c("race")
colnames(bmiData_A2_all_MR)
type(colnames(bmiData_A2_all_MR))
class(colnames(bmiData_A2_all_MR))
colnames(bmiData_A2_all_MR)
is.vector(colnames(bmiData_A2_all_MR))
colnames(bmiData_A2_all_MR)
colnames(bmiData_A2_all_MR)[-c("race")]
colnames(bmiData_A2_all_MR)[bmiData_A2_all_MR != "race")]
colnames(bmiData_A2_all_MR)[bmiData_A2_all_MR != "race"]
colnames(bmiData_A2_all_MR)
cols != "race"
cols <- colnames(bmiData_A2_all_MR)
cols != "race"
cols[cols != "race"]
install("StatisticalQLearning")
library("StatisticalQLearning")
stage_regression("month12BMI", bmiData_A2_all_MR[, 1:6])
library("StatisticalQLearning")
outcome <- "month12BMI"
dataframe <- bmiData_A2_all_MR[, 1:6]
reg_formula <- paste(outcome, "~", sep=" ")
reg_cols <- colnames(dataframe)
reg_cols <- reg_cols[reg_cols != "race"]
reg_cols
for (col in reg_cols) {
if (col == reg_cols[length(reg_cols)]) {
reg_formula <- paste(reg_formula, col, sep=" ")
} else {
reg_formula <- paste(reg_formula, col, "+", sep=" ")
}
}
reg_formula
reg_cols
outcome <- "month12BMI"
dataframe <- bmiData_A2_all_MR[, 1:6]
reg_formula <- paste(outcome, "~", sep=" ")
reg_cols <- colnames(dataframe)
reg_cols <- reg_cols[reg_cols != outcome]
for (col in reg_cols) {
if (col == reg_cols[length(reg_cols)]) {
reg_formula <- paste(reg_formula, col, sep=" ")
} else {
reg_formula <- paste(reg_formula, col, "+", sep=" ")
}
}
reg_formula
install("StatisticalQLearning")
stage_regression("month12BMI", bmiData_A2_all_MR[, 1:6])
group_id <- c('1', '1','1', '2', '2', '2')
departure_id <- c('202001', '202001', '202001', '202001', '202001', '202001')
dtd <- c(1, 2, 3, 1, 2, 3)
net_ffe <- c(100, 90, 80, 70, 60, 60)
rate <- c(900, 800, 800, 850, 800, 600)
test_dataframe <- data.frame(group_id, departure_id, dtd, net_ffe, rate)
test_dataframe
group_id <- c('1', '1','1', '2', '2', '2')
departure_id <- c('202001', '202001', '202001', '202001', '202001', '202001')
dtd <- c(1, 2, 3, 1, 2, 3)
net_ffe <- c(100, 90, 80, 70, 60, 60)
rate <- c(900, 800, 800, 850, 800, 600)
revenue <- c(1000, 0, 0, 1500, 0, 0)
test_dataframe <- data.frame(group_id, departure_id, dtd, net_ffe, rate, revenue)
test_dataframe
test_dataframe[test_dataframe$dtd == 1]
test_dataframe[test_dataframe$dtd == 1]
test_dataframe[test_dataframe$dtd == 1, ]
stage1_df <- test_dataframe[test_dataframe$dtd == 1, ]
stage_regression("revenue", stage1_df)
stage1_df <- test_dataframe[test_dataframe$dtd == 1, cols]
cols <- c("revenue", "net_ffe", "rate")
stage1_df <- test_dataframe[test_dataframe$dtd == 1, cols]
stage_regression("revenue", stage1_df)
group_id <- c('1', '1','1', '2', '2', '2', '3', '3', '3')
departure_id <- c('202001', '202001', '202001', '202001', '202001', '202001', '202001', '202001', '202001')
dtd <- c(1, 2, 3, 1, 2, 3, 1, 2, 3)
net_ffe <- c(100, 90, 80, 70, 60, 60, 110, 90, 60)
rate <- c(900, 800, 800, 850, 800, 600, 600, 500, 400)
revenue <- c(1000, 0, 0, 1500, 0, 0, 1200, 0, 0)
test_dataframe <- data.frame(group_id, departure_id, dtd, net_ffe, rate, revenue)
cols <- c("revenue", "net_ffe", "rate")
stage1_df <- test_dataframe[test_dataframe$dtd == 1, cols]
stage_regression("revenue", stage1_df)
reg <- stage_regression("revenue", stage1_df)
reg
test_dataframe
stage1_df
stage1_df[1, ]
predict(reg, stage1_df[1, ])
stage1_df
counterfactual_obs <- stage1_df[1, "rate"] <- 1000
counterfactual_obs
stage1_df
stage1_df[1, "rate"]
stage1_df <- test_dataframe[test_dataframe$dtd == 1, cols]
stage1_df
counterfactual_obs[1, "rate"] <- 1000
stage1_df
stage1_df[1, ]
stage1_df[1, ][1, ]
stage1_df[1, ]["rate"]
predict_outcome <- function(value, treatment, obs, model) {
# Counterfactual observation
counterfactual_obs <- obs
counterfactual_obs[1, treatment] <- value
# Model response
response <- predict(reg, counterfactual_obs)
return(response)
}
stage1_df[1, ]
predict_outcome(1000, "rate", stage1_df[1, ], reg)
predict_outcome(1000, "rate", stage1_df[1, ], reg)
predict_outcome(1200, "rate", stage1_df[1, ], reg)
predict_outcome(2000, "rate", stage1_df[1, ], reg)
predict_outcome(1000, "rate", stage1_df[1, ], reg)
optim(1000, predict_outcome(outcome="rate", obs=stage1_df[1, ], model=reg))
optim(
1000,
predict_outcome(outcome="rate", obs=stage1_df[1, ], model=reg),
method="Brent")
optim(
1000,
predict_outcome(outcome="rate", obs=stage1_df[1, ], model=reg),
method="Brent",
lower=50,
upper=10000)
optim(
1000,
predict_outcome(treatment="rate", obs=stage1_df[1, ], model=reg),
method="Brent",
lower=50,
upper=10000)
predict_outcome <- function(value) {
# Counterfactual observation
counterfactual_obs <- stage1_df[1, ]
counterfactual_obs[1, "rate"] <- value
# Model response
response <- predict(reg, counterfactual_obs)
return(response)
}
optim(
1000,
predict_outcome(treatment="rate", obs=stage1_df[1, ], model=reg),
lower=50,
upper=10000)
optim(
1000,
predict_outcome,
lower=50,
upper=10000)
optim(
1000,
predict_outcome,
lower=0,
upper=10000)
optim(
1000,
predict_outcome,
method="BFSG"
lower=0,
upper=10000)
optim(
1000,
predict_outcome,
method="BFSG",
lower=0,
upper=10000)
optim(
1000,
predict_outcome,
method="BFGS",
lower=0,
upper=10000)
opt_tx <- list("opt_treatments" = c(), "opt_response" =c())
opt_tx
opt_tx$opt_response
append(opt_tx$opt_response, 1)
opt_tx
opt_tx$opt_response <- append(opt_tx$opt_response, 1)
opt_tx
opt_tx$opt_response <- append(opt_tx$opt_response, 1)
opt_tx
for (i in stage1_df) {
print(i)
}
for (row in 1:nrow(stage1_df)) {
print(stage1_df[row, ])
}
optim(
1000,
predict_outcome,
method="BFGS",
lower=0,
upper=10000)
opt_res <- optim(
1000,
predict_outcome,
method="BFGS",
lower=0,
upper=10000)
opt_res
opt_res$value
reg
opt_res <- optim(
1000,
predict_outcome,
method="BFGS")
opt_res
opt_tx
stage1_df
stage1_df[4, ]
stage1_df[2, ]
stage1_df[2, ][1, ]
optimal_policy <- function(treatment, model, dataframe) {
opt_tx <- list("opt_treatments" = c(), "opt_response" =c())
for (row in 1:nrow(dataframe)) {
predict_outcome <- function(value) {
# Counterfactual observation
counterfactual_obs <- dataframe[row, ]
counterfactual_obs[1, "rate"] <- value
# Model response
response <- predict(reg, counterfactual_obs)
return(response)
}
# Optimise
opt_res <- optim(1000, predict_outcome, method="BFGS")
opt_tx$opt_treatments <- append(opt_tx$opt_treatments, opt_res$value)
opt_tx$opt_response <- append(opt_tx$opt_response, opt_res$par)
}
}
optimal_policy <- function(treatment, model, dataframe) {
opt_tx <- list("opt_treatments" = c(), "opt_response" =c())
for (row in 1:nrow(dataframe)) {
predict_outcome <- function(value) {
# Counterfactual observation
counterfactual_obs <- dataframe[row, ]
counterfactual_obs[1, treatment] <- value
# Model response
response <- predict(reg, counterfactual_obs)
return(response)
}
# Optimise
opt_res <- optim(1000, predict_outcome, method="BFGS")
opt_tx$opt_treatments <- append(opt_tx$opt_treatments, opt_res$value)
opt_tx$opt_response <- append(opt_tx$opt_response, opt_res$par)
}
}
optimal_policy("rate", reg, stage1_df)
result <- optimal_policy("rate", reg, stage1_df)
result
optimal_policy <- function(treatment, model, dataframe) {
opt_tx <- list("opt_treatments" = c(), "opt_response" =c())
for (row in 1:nrow(dataframe)) {
predict_outcome <- function(value) {
# Counterfactual observation
counterfactual_obs <- dataframe[row, ]
counterfactual_obs[1, treatment] <- value
# Model response
response <- predict(reg, counterfactual_obs)
return(response)
}
# Optimise
opt_res <- optim(1000, predict_outcome, method="BFGS")
opt_tx$opt_treatments <- append(opt_tx$opt_treatments, opt_res$value)
opt_tx$opt_response <- append(opt_tx$opt_response, opt_res$par)
}
return(opt_tx)
}
result <- optimal_policy("rate", reg, stage1_df)
result
test_dataframe
test_dataframe$stage1_opt_response <- result$opt_response
stage2_df <- test_dataframe[test_dataframe$dtd == 2, cols]
reg <- stage_regression("stage1_opt_response", stage2_df)
result <- optimal_policy("rate", reg, stage2_df)
test_dataframe
stage2_df
cols <- c("stage1_opt_response", "net_ffe", "rate")
stage2_df <- test_dataframe[test_dataframe$dtd == 2, cols]
reg <- stage_regression("stage1_opt_response", stage2_df)
result <- optimal_policy("rate", reg, stage2_df)
result
a <- lm(revenue ~ net_ffe, data=test_dataframe)
a
class(a)
a
install.packages("devtools")
setwd("/Users/joakimblach/Projects/Penny/StatisticalQLearning")
group_id <- c('1', '1','1', '2', '2', '2', '3', '3', '3')
departure_id <- c('202001', '202001', '202001', '202001', '202001', '202001', '202001', '202001', '202001')
dtd <- c(1, 2, 3, 1, 2, 3, 1, 2, 3)
net_ffe <- c(100, 90, 80, 70, 60, 60, 110, 90, 60)
rate <- c(900, 800, 800, 850, 800, 600, 600, 500, 400)
revenue <- c(1000, 0, 0, 1500, 0, 0, 1200, 0, 0)
test_dataframe <- data.frame(group_id, departure_id, dtd, net_ffe, rate, revenue)
test_dataframe
optDTR
library(devtools)
install_github("Maersk-Global/penny-analytics-StatisticalQLearning")
install_github("Maersk-Global/penny-analytics-StatisticalQLearning", auth_token='8b760f19c93e9704ddb0af5c189c3b37c4f255d5')
install_github("Maersk-Global/penny-analytics-StatisticalQLearning")
remotes::install_github("Maersk-Global/penny-analytics-StatisticalQLearning")
setwd("/Users/joakimblach/Projects/Penny/StatisticalQLearning")
install("StatisticalQLearning")
setwd("..")
install("StatisticalQLearning")
setwd("/Users/joakimblach/Projects/Penny/StatisticalQLearning")
getwd()
install_github("JoakimBlach/StatisticalQLearning")
start_stage <- 10
end_stage <- 5
start_stage - end_stage
number_of_stages <- start_stage - end_stage
for (i in 1:number_of_stages){}
for (i in 1:number_of_stages) {print(i)}
for (i in start_stage:end_stage) {print(i)}
optDTR <- list("model", "opt_tx", "opt_resp")
optDTR
optDTR <- list("model"=c(1, 2), "opt_tx", "opt_resp")
optDTR
paste("stage", "1")
paste("stage", "1", sep = "")
attr(optDTR$model, stage_name) <- "Comment for item2"
stage_name <- paste("stage", "1", sep = "")
attr(optDTR$model, stage_name) <- "Comment for item2"
optDTR$model
optDTR$model$stage1
optDTR
optDTR <- list("model", "opt_tx", "opt_resp")
optDTR
optDTR$model[stage] <- "Hello"
optDTR$model[5] <- "Hello"
optDTR$model
for (i in start_stage:end_stage) {print(i-end_stage)}
optDTR <- list("model", "opt_tx", "opt_resp")
optDTR
stage_name <- paste("stage", "1", sep = "")
stage_name
